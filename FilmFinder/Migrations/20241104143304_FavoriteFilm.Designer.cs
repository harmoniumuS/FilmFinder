// <auto-generated />
using System;
using FilmFinder.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmFinder.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241104143304_FavoriteFilm")]
    partial class FavoriteFilm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("FilmFinder.DataBase.CountryFilm", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("CountryFilm");
                });

            modelBuilder.Entity("FilmFinder.DataBase.GenreFilm", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenreId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("GenreFilm");
                });

            modelBuilder.Entity("FilmFinder.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FilmId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FilmFinder.Models.FavoriteFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FilmId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("FavoriteFilms");
                });

            modelBuilder.Entity("FilmFinder.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditorAnnotation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EndYear")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FilmLength")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Has3D")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasImax")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImdbId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTicketsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KinopoiskHDId")
                        .HasColumnType("TEXT");

                    b.Property<int>("KinopoiskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastSync")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEn")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameOriginal")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameRu")
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUrlPreview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductionStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("RatingAgeLimits")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RatingAwait")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingAwaitCount")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("RatingFilmCritics")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingFilmCriticsVoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("RatingGoodReview")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingGoodReviewVoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("RatingImdb")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingImdbVoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("RatingKinopoisk")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingKinopoiskVoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RatingMpaa")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RatingRfCritics")
                        .HasColumnType("REAL");

                    b.Property<int?>("RatingRfCriticsVoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Serial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ShortFilm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slogan")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StartYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmFinder.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FilmId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FilmFinder.DataBase.CountryFilm", b =>
                {
                    b.HasOne("FilmFinder.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmFinder.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmFinder.DataBase.GenreFilm", b =>
                {
                    b.HasOne("FilmFinder.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmFinder.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmFinder.Models.Country", b =>
                {
                    b.HasOne("FilmFinder.Models.Film", null)
                        .WithMany("Countries")
                        .HasForeignKey("FilmId");
                });

            modelBuilder.Entity("FilmFinder.Models.FavoriteFilm", b =>
                {
                    b.HasOne("FilmFinder.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmFinder.Models.Genre", b =>
                {
                    b.HasOne("FilmFinder.Models.Film", null)
                        .WithMany("Genres")
                        .HasForeignKey("FilmId");
                });

            modelBuilder.Entity("FilmFinder.Models.Film", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
